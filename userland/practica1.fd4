type Jorge = Nat -> Nat -> Nat
let a : Jorge = let rec gcd (m : Nat) (n : Nat) : Nat = ifz n then m else (ifz m then n else (ifz (n - m) then (gcd (m - n) n) else (gcd m (n - m)))) in gcd

let printGeorge : Nat -> Nat = print

{-
lasdjflasdljfajlsdf
let mini = fun (f: Nat -> Nat) -> (fix (mini : Nat -> Nat) (n : Nat) -> ifz (f n) then n else mini (n + 1)) 0
';'';;;;';p[p09876543wsdfghj,./xcvbzxcbz]cvb
z;xvbzzxvc
;lf33--|Â¿>
-}
